import json
import datetime as dt
import asyncio

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError, RetryAfter, TimedOut, NetworkError
import os
import cairo
import math
import io

DATA_FILE = 'users_data.json'

users_data = []
super_admins = []
pending_messages = []

help_text = '''–≠—Ç–æ –Ω–æ–≤—ã–π –±–æ—Ç –ø–æ–¥—Å–ª—É—à–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π - @justafriendt
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∞–¥–º–∏–Ω–∞–º –ø–æ–¥—Å–ª—É—à–∫–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –≤—Å–µ –ø—Ä–∏–≤—ã–∫–ª–∏, —Ç–∞–∫ –∏ —Ñ–æ—Ç–æ
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É, –ø–æ—á–∏—Ç–∞—é —É—á—Ç—É –∏—Å–ø—Ä–∞–≤–ª—é. –ù–∞–¥–µ—é—Å—å —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ–π –∑–∞–º–µ–Ω–æ–π
–¥—Ä—É–≥–∏—Ö –∞–Ω–æ–Ω–∏–º–æ–∫ –¥–ª—è –Ω–∞—à–µ–π –ø–æ–¥—Å–ª—É—à–∫–∏, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!'''


def log(a):
    print(f'[] {dt.datetime.now()} - {a}')


def load_users_data():
    global users_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as file:
            users_data = json.load(file)
    else:
        users_data = []

    global super_admins
    if os.path.exists('admins.json'):
        with open('admins.json', 'r') as file:
            super_admins = json.load(file)
    else:
        super_admins = []
    log('Admins info loaded')


def save_users_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(users_data, file, indent=4)
    with open('admins.json', 'w') as file:
        json.dump(super_admins, file, indent=4)
    log('Admins info saved')


def wrap_text(context, text, max_width):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É."""
    words = text.split()
    lines = []
    current_line = []
    current_width = 0

    for word in words:
        word_extents = context.text_extents(word + ' ')  # –®–∏—Ä–∏–Ω–∞ —Å–ª–æ–≤–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º
        word_width = word_extents.width

        if current_width + word_width <= max_width:
            current_line.append(word)
            current_width += word_width
        else:
            lines.append(' '.join(current_line))
            current_line = [word]
            current_width = word_width

    if current_line:
        lines.append(' '.join(current_line))

    return lines


def text_to_image(text, padding=40, right_padding_ratio=0.15, line_spacing=1.5, font_size=30,
                  font='Franklin Gothic Medium'):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
    text_color = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    background_color = (1, 1, 1)  # –ë–µ–ª—ã–π —Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç RGB —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    temp_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 1, 1)
    temp_context = cairo.Context(temp_surface)
    temp_context.select_font_face(font, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
    temp_context.set_font_size(font_size)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 600 –ø–∏–∫—Å–µ–ª–µ–π) —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞
    max_width = 600
    max_text_width = max_width * (1 - right_padding_ratio)  # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
    lines = wrap_text(temp_context, text, max_text_width)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    line_extents = temp_context.text_extents('X')  # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
    line_height = line_extents.height
    text_height = line_height * len(lines) * line_spacing  # –í—ã—Å–æ—Ç–∞ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–µ–∂—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    img_width = max_width + 2 * padding
    img_height = math.ceil(text_height + 2 * padding)

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    surface = cairo.ImageSurface(cairo.FORMAT_RGB24, img_width, img_height)
    context = cairo.Context(surface)

    # –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
    context.set_source_rgb(*background_color)
    context.paint()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
    context.set_source_rgb(*text_color)
    context.select_font_face(font, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
    context.set_font_size(font_size)

    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    y_offset = padding + line_height  # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å—Ç—É–ø–∞

    for line in lines:
        line_extents = context.text_extents(line)
        x_offset = padding  # –°–ª–µ–≤–∞ –æ—Ç—Å—Ç—É–ø —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        context.move_to(x_offset, y_offset)
        context.show_text(line)
        y_offset += line_height * line_spacing  # –°–º–µ—â–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_data = io.BytesIO()
    surface.write_to_png(image_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫
    image_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞

    return image_data


async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin1_key = ''
    admin2_key = ''
    with open('keys.txt') as file:
        data = file.read().split()
        admin1_key, admin2_key = data[1], data[3]
    if not context.args:
        a = ''
        if update.message.chat_id in users_data:
            a = '\n\nüëâ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º üëà'
        await update.message.reply_text(
            f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /admin <key>\n\n–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å —Å —Å–µ–±—è –∞–¥–º–∏–Ω–∫—É /admin 0{a}')
    else:
        if context.args[0] == admin1_key:
            user_id = update.message.chat_id
            if user_id not in users_data:
                users_data.append(user_id)
                await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
                await update.message.delete()
                log('@' + str(update.message.from_user['username']) + ' –∑–∞—à—ë–ª –∫–∞–∫ –∞–¥–º–∏–Ω')
                save_users_data()
            else:
                await update.message.reply_text('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        elif context.args[0] == '0':
            try:
                await update.message.reply_text('–í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                log('@' + str(update.message.from_user['username']) + ' –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω')
                await update.message.delete()
                users_data.remove(update.message.chat_id)
                try:
                    super_admins.remove(update.message.chat_id)
                except:
                    pass
                save_users_data()
            except ValueError:
                pass
        elif context.args[0] == admin2_key:
            user_id = update.message.chat_id
            if user_id not in users_data:
                users_data.append(user_id)
                super_admins.append(user_id)
                await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
                log('@' + str(update.message.from_user['username']) + '–∑–∞—à—ë–ª –∫–∞–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω')
                save_users_data()
                await update.message.delete()
            else:
                await update.message.reply_text('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        else:
            await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    pending_messages.append(update.message.chat_id)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ üëá")


# async def send_message_with_retry(bot, chat_id, text, retries=5):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫."""
#     for attempt in range(retries):
#         try:
#             # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
#             await bot.send_photo(chat_id=chat_id, photo=ttm.text_to_image(text))
#             log(f"Message sent successfully to {chat_id}")
#             return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
#         except RetryAfter as e:
#             # –û—à–∏–±–∫–∞: Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω)
#             log(f"Rate limit exceeded. Retry after {e.retry_after} seconds.")
#             await asyncio.sleep(e.retry_after)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
#         except (TimedOut, NetworkError) as e:
#             # –û—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
#             log(f"Network error: {e}. Retrying in 5 seconds...")
#             await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
#         except TelegramError as e:
#             # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
#             log(f"Failed to send message to {chat_id}. Error: {e}")
#             break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–∞
#     else:
#         log(f"Failed to send message to {chat_id} after {retries} attempts.")


async def send_photo_with_retry(bot, chat_id, photo_file, caption, retries=5):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫."""
    for attempt in range(retries):
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.send_photo(chat_id=chat_id, photo=photo_file, caption=caption)
            log(f"Photo sent successfully to {chat_id}")
            return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        except RetryAfter as e:
            # –û—à–∏–±–∫–∞: Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω)
            log(f"Rate limit exceeded. Retry after {e.retry_after} seconds.")
            await asyncio.sleep(e.retry_after)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        except (TimedOut, NetworkError) as e:
            # –û—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            log(f"Network error: {e}. Retrying in 5 seconds...")
            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except TelegramError as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            log(f"Failed to send photo to {chat_id}. Error: {e}")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º–∞
    else:
        log(f"Failed to send photo to {chat_id} after {retries} attempts.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    if user_id in pending_messages:
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        rendered_photo = text_to_image(update.message.text)
        for target_user_id in users_data[:]:
            log(f'Trying to send "{update.message.text[0:40]}" from {user_id} to {target_user_id}')
            a = ''
            if target_user_id in super_admins:
                a = '\n\n–æ—Ç @' + str(update.message.from_user['username'])

            await send_photo_with_retry(context.bot, chat_id=target_user_id, photo_file=rendered_photo,
                                        caption=f"{a}")

        pending_messages.remove(user_id)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    if user_id in pending_messages:
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

        for target_user_id in users_data[:]:
            log(f'Trying to send photo from "{user_id}" to {target_user_id}')
            photo_file = update.message.photo[-1].file_id
            desc = update.message.caption
            if desc is None:
                desc = ''
            else:
                desc = '\n\n' + desc
            a = ''
            if target_user_id in super_admins:
                a = '\n\n–æ—Ç @' + str(update.message.from_user['username'])

            await send_photo_with_retry(context.bot, chat_id=target_user_id, photo_file=photo_file,
                                        caption=f"{desc}{a}")

        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        pending_messages.remove(user_id)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")


async def helpbot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(help_text)


def main():
    token = "7794871532:AAHRRQNSPrNMF8MLvteouXGpFG1tNsLsh2o"

    load_users_data()

    app = ApplicationBuilder().token(token).build()

    log('App started')

    app.add_handler(CommandHandler(["start", 'send'], start))

    app.add_handler(CommandHandler("admin", admin))

    app.add_handler(CommandHandler("help", helpbot))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()


if __name__ == "__main__":
    main()
